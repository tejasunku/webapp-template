# Architecture Resources - v0.0
# External systems and dependencies for the monorepo

# Hosting Providers
hosts:
  render:
    type: paas
    purpose: Primary hosting for services
    billing_model: per_image_served  # Note: Bundle multiple services per image to save costs
    services:
      - backend_api
      - frontend_web
      - background_workers
    redis:
      type: redis_compatible
      version: recent_enough_for_streams
      uses:
        - caching
        - redis_streams_for_queues
      note: Can replace both Redis cache and queue systems

  supabase:
    type: backend_as_a_service
    purpose: Managed database and auth
    services:
      database:
        type: postgresql
        managed: true
        purpose: Primary data storage
      auth:
        type: user_authentication
        managed: true
        purpose: User management and auth
      edge_functions:
        type: serverless_functions
        status: inactive  # Not using for now
        purpose: Future edge computing needs

# Database Resources
database:
  primary:
    provider: supabase
    type: postgresql
    managed: true
    orm: drizzle
    purpose: Primary data persistence
    connection: managed_via_supabase

# Cache & Queue Resources
cache:
  primary:
    provider: render_redis
    type: redis_compatible
    purpose: Caching layer
    managed: true
    connection: managed_via_render

queue:
  primary:
    provider: render_redis
    type: redis_streams
    purpose: Background job processing
    managed: true
    note: Uses same Redis instance as cache via Redis Streams

# Storage Resources
storage:
  primary:
    provider: supabase
    type: supabase_storage
    purpose: File storage, user uploads
    managed: true

# External APIs
external_apis:
  # Will be added as needed
  # Examples for future reference:
  # payment_processor:
  #   provider: stripe
  #   purpose: Payment processing

  # email_service:
  #   provider: sendgrid
  #   purpose: Email delivery

# Development Environment
development:
  local_testing:
    primary_method: docker
    purpose: Local development and testing
    includes:
      - database_container
      - redis_container
      - application_containers
    note: Use Docker Compose for local service orchestration

  edge_function_testing:
    method: supabase_local
    status: inactive
    purpose: Future edge function testing
    note: Not using edge functions currently

# Service Configuration Notes
configuration_notes:
  render_deployment:
    - Bundle multiple services per Docker image when possible
    - Use environment variables for configuration
    - Health checks required for all services

  supabase_integration:
    - Use Supabase client for auth
    - Database connection via Supabase client
    - Storage via Supabase SDK

  redis_configuration:
    - Single Redis instance for both cache and queues
    - Use different key prefixes to separate concerns
    - Redis Streams for job queuing
    - Standard Redis operations for caching

# Future Resources (placeholders)
future_resources:
  # monitoring:
  #   provider: tbd
  #   purpose: Application monitoring

  # cdn:
  #   provider: tbd
  #   purpose: Static asset delivery

  # email_service:
  #   provider: tbd
  #   purpose: Transactional emails